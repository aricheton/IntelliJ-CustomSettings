<templateSet group="Kotlin">
  <template name="nt" value="@org.junit.jupiter.api.Test&#10;fun `should $expected$`(){&#10;    // Given&#10;    $END$     &#10;         &#10;    // When&#10;         &#10;    // Then&#10;    org.assertj.core.api.Assertions.fail&lt;Any&gt;(&quot;This test fail&quot;)&#10;}" description="Create a new test method" toReformat="true" toShortenFQNames="true">
    <variable name="expected" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="ntmockk" value="val $mockName$ = io.mockk.mockk&lt;$mockType$&gt;()&#10;io.mockk.every { $methodCall$ } returns $returnValue$" description="New test mock" toReformat="false" toShortenFQNames="true">
    <variable name="mockName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="mockType" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="methodCall" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValue" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="ast" value="Assertions.assertThat($tested$).$is$&#10;$END$" description="Test assertion" toReformat="true" toShortenFQNames="true">
    <variable name="tested" expression="tested" defaultValue="" alwaysStopAt="true" />
    <variable name="is" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="be" value="@org.junit.jupiter.api.BeforeEach&#10;fun beforeEach() {&#10;    $END$&#10;}" description="Create before each function" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="ae" value="@org.junit.jupiter.api.AfterEach&#10;fun afterEach() {&#10;    $END$&#10;}" description="Create an after each function" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="ba" value="@org.junit.jupiter.api.BeforeAll&#10;fun beforeAll() {&#10;    $END$&#10;}&#10;" description="Create before all function" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_OBJECT_DECLARATION" value="true" />
    </context>
  </template>
  <template name="aa" value="@org.junit.jupiter.api.AfterAll&#10;fun afterAll() {&#10;    $END$&#10;}&#10;" description="Create an after all function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_OBJECT_DECLARATION" value="true" />
    </context>
  </template>
  <template name="logger" value="val LOGGER = org.slf4j.LoggerFactory.getLogger($CLASS$::class.java)" description="Create logger for current class" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="kotlinClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_OBJECT_DECLARATION" value="true" />
    </context>
  </template>
  <template name="nic" value="@org.junit.jupiter.api.Nested&#10;inner class $ClassName$ {&#10;    $END$     &#10;}" description="Create a nested test class" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="NestedClassName" defaultValue="NestedClassName" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
</templateSet>